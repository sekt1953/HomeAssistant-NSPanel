# Set some variables for convenience
substitutions:
  node_name: nspanel-demo
  device_name: Demo NSPanel
  default_brightness: '50'
  time_format: '"%a %d/%m %H:%M"'
  temp_format: '"%.1f°C"'
  hassio_ip: !secret Hassio_IP
  hassio_port: !secret Hassio_Port
  tft_file: ncp-0022.tft
  rtttl_reboot: "twobits:d=4,o=5,b=220:c6,8g,8g,a,g,p,b,c6"
  rtttl_weather: "MissionImp:d=16,o=6,b=95:32d,32d#"

# Note: this may not be needed if the pull request has been merged.
# Check https://github.com/esphome/esphome/pull/2956 for current status.
external_components:
  - source: github://pr#2956
    components: [nextion]
    refresh: 1h

esphome:
  name: $node_name
  comment: $device_name

esp32:
  board: esp32dev

wifi:
  networks:
  - ssid: !secret WiFi_SSID
    password: !secret WiFi_Pass

# Enable logging
logger:

# Enable wireless updates
ota:
  password: !secret OTA_Pass

# Enable Home Assistant API
api:
  password: !secret API_Pass
  services:
    # Service to play a song
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
    - service: upload_tft
      then:
        - lambda: 'id(disp1)->upload_tft();'
    - service: send_command
      variables:
        cmd: string
      then:
        - lambda: 'id(disp1).send_command_printf("%s", cmd.c_str());'

# Sync the time
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: '*'
        then:
          - lambda: |-
              auto time_text = id(homeassistant_time).now().strftime($time_format);
              id(disp1).set_component_text("Quick.t0_time", time_text.c_str());
              id(disp1).set_component_text("CookTimer.t0_time", time_text.c_str());
              id(disp1).set_component_text("Kitchen.t0_time", time_text.c_str());
              id(disp1).set_component_text("Climate.t0_time", time_text.c_str());
              id(disp1).set_component_text("Laundry.t0_time", time_text.c_str());
              id(disp1).set_component_text("FrontDoor.t0_time", time_text.c_str());
              id(disp1).set_component_text("Livingroom.t0_time", time_text.c_str());
              id(disp1).set_component_text("Toilet.t0_time", time_text.c_str());
              id(disp1).set_component_text("Windows.t0_time", time_text.c_str());
              id(disp1).set_component_text("Printer.t0_time", time_text.c_str());
              id(disp1).set_component_text("PcScreen.t0_time", time_text.c_str());

button:
  - platform: restart                   # A reboot button is always useful
    name: Restart $device_name
  - platform: template                  # upload Nextion TFT file
    name: $device_name TFT Upload
    device_class: update
    on_press:
      - lambda: 'id(disp1).upload_tft();'

# Define some inputs
binary_sensor:
  - platform: gpio
    name: $device_name Left Button
    pin:
      number: 14
      inverted: true
    on_click:
      - switch.toggle: relay_1
    on_release:
      lambda: 'id(disp1).send_command_printf("click screensaver,0");'

  - platform: gpio
    name: $device_name Right Button
    pin:
      number: 27
      inverted: true
    on_click:
      - switch.toggle: relay_2
    on_release:
      lambda: 'id(disp1).send_command_printf("click screensaver,0");'

# Nextion Dispaly Button on CookTimer Page  
  - platform: nextion             # select Previous timer
    name: $device_name Prev
    page_id: 1
    component_id: 4

  - platform: nextion             # Start timer
    name: $device_name Play
    page_id: 1
    component_id: 5
    
  - platform: nextion             # select Next timer   
    name: $device_name Next
    page_id: 1
    component_id: 6 

sensor:
  - platform: wifi_signal
    name: $device_name WiFi Signal
    update_interval: 60s

  - platform: ntc
    id: inside_temperature
    sensor: resistance_sensor
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 10kOhm
    name: $device_name Temperature
    on_value:
      # Push it to the display
      then:
        - lambda: 'id(disp1).set_component_text_printf("Climate.t1_nsp", $temp_format, id(inside_temperature).state);'

  - platform: resistance
    id: resistance_sensor
    sensor: ntc_source
    configuration: DOWNSTREAM
    resistor: 11.2kOhm

  - platform: adc
    id: ntc_source
    pin: 38
    update_interval: 10s
    attenuation: 11db

    # Grab current temperature from Home Assistant weather.home
  - platform: homeassistant
    id: outside_temperature
    entity_id: weather.home
    attribute: temperature
    on_value:
      # Push it to the display
      then:
        - lambda: 'id(disp1).set_component_text_printf("Climate.t2_out", $temp_format, id(outside_temperature).state);'
        - rtttl.play: $rtttl_weather

    # Grab current temperature from Home Assistant pwm_kokken_new_temp
  - platform: homeassistant
    id: kok_temperature
    entity_id: sensor.pwm_kokken_new_temp
    on_value:
      # Push it to the display
      then:
        - lambda: 'id(disp1).set_component_text_printf("Climate.t3_in", $temp_format, id(kok_temperature).state);'

text_sensor:
    # Grab current text from Home Assistant input_text.kitchen_display_friendly_name 
  - platform: homeassistant
    id: kok_display
    entity_id: input_text.kitchen_display_friendly_name
    name: "Display_text"
    on_value:
      # Push it to the display
      then:
        - lambda: 'id(disp1).set_component_text_printf("CookTimer.t0_frendly", id(kok_display).state.c_str());'

  - platform: wifi_info
    ip_address:
      name: ESP IP Address

# Define some outputs
switch:
  # The two relays
  - platform: gpio
    name: $device_name Relay 1
    id: relay_1
    pin:
      number: 22
  - platform: gpio
    name: $device_name Relay 2
    id: relay_2
    pin:
      number: 19

  # Pin 4 always needs to be on to power up the display
  - platform: gpio
    id: screen_power
    entity_category: config
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_ON

number:
  platform: template
  name: $device_name Brightness
  id: brightness
  entity_category: config
  unit_of_measurement: '%'
  min_value: 0
  max_value: 100
  step: 1
  initial_value: 50
  set_action:
    then:
      - lambda: 'id(disp1).set_backlight_brightness(x/100);'


# Configure the internal bleeper
output:
  - platform: ledc
    id: buzzer_out
    pin:
      number: 21

# Enable ringtone music support
rtttl:
  id: buzzer
  output: buzzer_out

# Configure UART for communicating with the screen
uart:
  id: tft_uart
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200

# Configure the screen itself
display:
  - platform: nextion
    id: disp1
    uart_id: tft_uart
    tft_url: http://$hassio_ip:$hassio_port/local/tft/$tft_file
    #tft_url: !lambda 'return {WiFi.localIP().toString().c_str()}:$hassio_port/local/tft/$tft_file;'
    on_setup:
      then:
        - number.set:
            id: brightness
            value: $default_brightness
        - lambda: |-
            id(disp1).set_component_text_printf("CookTimer.t0_frendly", id(kok_display).state.c_str());
            id(disp1).set_component_text_printf("Climate.t1_nsp", $temp_format, id(inside_temperature).state);            
            id(disp1).set_component_text_printf("Climate.t2_out", $temp_format, id(outside_temperature).state);
            id(disp1).set_component_text_printf("Climate.t3_in", $temp_format, id(kok_temperature).state);
            auto time_text = id(homeassistant_time).now().strftime($time_format);
            id(disp1).set_component_text("Navi.t0", time_text.c_str());
            id(disp1).set_component_text("CookTimer.t0", time_text.c_str());
        - rtttl.play: $rtttl_reboot
  
  